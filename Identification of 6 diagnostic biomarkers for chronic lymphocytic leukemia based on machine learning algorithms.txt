library(limma)
library(pheatmap)
inputFile="merge.txt"
logFCfilter=2
adj.P.Val.Filter=0.05
setwd("C:\\Users\\Administrator\\Desktop\\WCGNA")
rt=read.table(inputFile,header=T,sep="\t",check.names=F)
rt=as.matrix(rt)
rownames(rt)=rt[,1]
exp=rt[,2:ncol(rt)]
dimnames=list(rownames(exp),colnames(exp))
data=matrix(as.numeric(as.matrix(exp)),nrow=nrow(exp),dimnames=dimnames)
data=avereps(data)
data=data[rowMeans(data)>0,]
sampleName1=c()
files=dir()
files=grep("s1.txt$",files,value=T)
for(fileinfiles){
rt=read.table(file,header=F,sep="\t",check.names=F)
geneNames=as.vector(rt[,1])
uniqGene=unique(geneNames)
sampleName1=c(sampleName1,uniqGene)
}
sampleName2=c()
files=dir()
files=grep("s2.txt$",files,value=T)
for(fileinfiles){
rt=read.table(file,header=F,sep="\t",check.names=F)
geneNames=as.vector(rt[,1])
uniqGene=unique(geneNames)
sampleName2=c(sampleName2,uniqGene)
}
conData=data[,sampleName1]
treatData=data[,sampleName2]
data=cbind(conData,treatData)
conNum=ncol(conData)
treatNum=ncol(treatData)
Type=c(rep("con",conNum),rep("treat",treatNum))
design<-model.matrix(~0+factor(Type))
colnames(design)<-c("con","treat")
fit<-lmFit(data,design)
cont.matrix<-makeContrasts(treat-con,levels=design)
fit2<-contrasts.fit(fit,cont.matrix)
fit2<-eBayes(fit2)
allDiff=topTable(fit2,adjust='fdr',number=200000)
allDiffOut=rbind(id=colnames(allDiff),allDiff)
write.table(allDiffOut,file="all.txt",sep="\t",quote=F,col.names=F)
outData=rbind(id=paste0(colnames(data),"_",Type),data)
write.table(outData,file="normalize.txt",sep="\t",quote=F,col.names=F)
diffSig=allDiff[with(allDiff,(abs(logFC)>logFCfilter&adj.P.Val<adj.P.Val.Filter)),]
diffSigOut=rbind(id=colnames(diffSig),diffSig)
write.table(diffSigOut,file="diff.txt",sep="\t",quote=F,col.names=F)
diffGeneExp=data[row.names(diffSig),]
diffGeneExpOut=rbind(id=paste0(colnames(diffGeneExp),"_",Type),diffGeneExp)
write.table(diffGeneExpOut,file="diffGeneExp.txt",sep="\t",quote=F,col.names=F)
geneNum=50
diffSig=diffSig[order(as.numeric(as.vector(diffSig$logFC))),]
diffGeneName=as.vector(rownames(diffSig))
diffLength=length(diffGeneName)
hmGene=c()
if(diffLength>(2*geneNum)){
hmGene=diffGeneName[c(1:geneNum,(diffLength-geneNum+1):diffLength)]
}else{
hmGene=diffGeneName
}
hmExp=data[hmGene,]
Type=c(rep("Con",conNum),rep("Treat",treatNum))
names(Type)=colnames(data)
Type=as.data.frame(Type)
pdf(file="heatmap.pdf",width=10,height=8)
pheatmap(hmExp,
annotation=Type,
color=colorRampPalette(c("blue","white","red"))(50),
cluster_cols=F,
show_colnames=F,
scale="row",
fontsize=8,
fontsize_row=7,
fontsize_col=8)
dev.off()
library(limma)
library(WGCNA)
expFile="normalize.txt"
setwd("C:\\Users\\Administrator\\Desktop\\WCGNA)
rt=read.table(expFile,header=T,sep="\t",check.names=F)
rt=as.matrix(rt)
rownames(rt)=rt[,1]
exp=rt[,2:ncol(rt)]
dimnames=list(rownames(exp),colnames(exp))
data=matrix(as.numeric(as.matrix(exp)),nrow=nrow(exp),dimnames=dimnames)
data=avereps(data)
data=data[apply(data,1,sd)>0.7,]
Type=gsub("(.*)\\_(.*)","\\2",colnames(data))
conCount=length(Type[Type=="con"])
treatCount=length(Type[Type=="treat"])
datExpr0=t(data)
gsg=goodSamplesGenes(datExpr0,verbose=3)
if(!gsg$allOK)
{
#Optionally,printthegeneandsamplenamesthatwereremoved:
if(sum(!gsg$goodGenes)>0)
printFlush(paste("Removinggenes:",paste(names(datExpr0)[!gsg$goodGenes],collapse=",")))
if(sum(!gsg$goodSamples)>0)
printFlush(paste("Removingsamples:",paste(rownames(datExpr0)[!gsg$goodSamples],collapse=",")))
#Removetheoffendinggenesandsamplesfromthedata:
datExpr0=datExpr0[gsg$goodSamples,gsg$goodGenes]
}
sampleTree=hclust(dist(datExpr0),method="average")
pdf(file="1_sample_cluster.pdf",width=12,height=9)
par(cex=0.6)
par(mar=c(0,4,2,0))
plot(sampleTree,main="Sampleclusteringtodetectoutliers",sub="",xlab="",cex.lab=1.5,cex.axis=1.5,cex.main=2)
abline(h=20000,col="red")
dev.off()
clust=cutreeStatic(sampleTree,cutHeight=20000,minSize=10)
table(clust)
keepSamples=(clust==1)
datExpr0=datExpr0[keepSamples,]
traitData=data.frame(Con=c(rep(1,conCount),rep(0,treatCount)),
Treat=c(rep(0,conCount),rep(1,treatCount)))
row.names(traitData)=colnames(data)
fpkmSamples=rownames(datExpr0)
traitSamples=rownames(traitData)
sameSample=intersect(fpkmSamples,traitSamples)
datExpr0=datExpr0[sameSample,]
datTraits=traitData[sameSample,]
sampleTree2=hclust(dist(datExpr0),method="average")
traitColors=numbers2colors(datTraits,signed=FALSE)
pdf(file="2_sample_heatmap.pdf",width=12,height=12)
plotDendroAndColors(sampleTree2,traitColors,
groupLabels=names(datTraits),
main="Sampledendrogramandtraitheatmap")
dev.off()
enableWGCNAThreads()
powers=c(1:20)
sft=pickSoftThreshold(datExpr0,powerVector=powers,verbose=5)
pdf(file="3_scale_independence.pdf",width=9,height=5)
par(mfrow=c(1,2))
cex1=0.9
plot(sft$fitIndices[,1],-sign(sft$fitIndices[,3])*sft$fitIndices[,2],
xlab="SoftThreshold(power)",ylab="ScaleFreeTopologyModelFit,signedR^2",type="n",
main=paste("Scaleindependence"));
text(sft$fitIndices[,1],-sign(sft$fitIndices[,3])*sft$fitIndices[,2],
labels=powers,cex=cex1,col="red");
abline(h=0.90,col="red")
plot(sft$fitIndices[,1],sft$fitIndices[,5],
xlab="SoftThreshold(power)",ylab="MeanConnectivity",type="n",
main=paste("Meanconnectivity"))
text(sft$fitIndices[,1],sft$fitIndices[,5],labels=powers,cex=cex1,col="red")
dev.off()
sft
softPower=sft$powerEstimate
adjacency=adjacency(datExpr0,power=softPower)
softPower
pdf(file="3_softConnectivity.pdf",width=9,height=5)
k<-softConnectivity(datE=datExpr0,power=softPower)
#sizeGrWindow(10,5)
par(mfrow=c(1,2))
hist(k)
scaleFreePlot(k,main="CheckScalefreetopology\n")
dev.off()
TOM=TOMsimilarity(adjacency)
dissTOM=1-TOM
geneTree=hclust(as.dist(dissTOM),method="average");
pdf(file="4_gene_clustering.pdf",width=12,height=9)
plot(geneTree,xlab="",sub="",main="GeneclusteringonTOM-baseddissimilarity",
labels=FALSE,hang=0.04)
dev.off()
minModuleSize=60
dynamicMods=cutreeDynamic(dendro=geneTree,distM=dissTOM,
deepSplit=2,pamRespectsDendro=FALSE,
minClusterSize=minModuleSize);
table(dynamicMods)
dynamicColors=labels2colors(dynamicMods)
table(dynamicColors)
pdf(file="5_Dynamic_Tree.pdf",width=8,height=6)
plotDendroAndColors(geneTree,dynamicColors,"DynamicTreeCut",
dendroLabels=FALSE,hang=0.03,
addGuide=TRUE,guideHang=0.05,
main="Genedendrogramandmodulecolors")
dev.off()
MEList=moduleEigengenes(datExpr0,colors=dynamicColors)
MEs=MEList$eigengenes
MEDiss=1-cor(MEs);
METree=hclust(as.dist(MEDiss),method="average")
pdf(file="6_Clustering_module.pdf",width=7,height=6)
plot(METree,main="Clusteringofmoduleeigengenes",
xlab="",sub="")
MEDissThres=0.25
abline(h=MEDissThres,col="red")
dev.off()
merge=mergeCloseModules(datExpr0,dynamicColors,cutHeight=MEDissThres,verbose=3)
mergedColors=merge$colors
mergedMEs=merge$newMEs
pdf(file="7_merged_dynamic.pdf",width=9,height=6)
plotDendroAndColors(geneTree,mergedColors,"DynamicTreeCut",
dendroLabels=FALSE,hang=0.03,
addGuide=TRUE,guideHang=0.05,
main="Genedendrogramandmodulecolors")
dev.off()
moduleColors=mergedColors
table(moduleColors)
colorOrder=c("grey",standardColors(50))
moduleLabels=match(moduleColors,colorOrder)-1
MEs=mergedMEs
nGenes=ncol(datExpr0)
nSamples=nrow(datExpr0)
moduleTraitCor=cor(MEs,datTraits,use="p")
moduleTraitPvalue=corPvalueStudent(moduleTraitCor,nSamples)
pdf(file="8_Module_trait.pdf",width=6,height=5.5)
textMatrix=paste(signif(moduleTraitCor,2),"\n(",
signif(moduleTraitPvalue,1),")",sep="")
dim(textMatrix)=dim(moduleTraitCor)
par(mar=c(5,10,3,3))
labeledHeatmap(Matrix=moduleTraitCor,
xLabels=names(datTraits),
yLabels=names(MEs),
ySymbols=names(MEs),
colorLabels=FALSE,
colors=blueWhiteRed(50),
textMatrix=textMatrix,
setStdMargins=FALSE,
cex.text=0.5,
zlim=c(-1,1),
main=paste("Module-traitrelationships"))
dev.off()
modNames=substring(names(MEs),3)
geneModuleMembership=as.data.frame(cor(datExpr0,MEs,use="p"))
MMPvalue=as.data.frame(corPvalueStudent(as.matrix(geneModuleMembership),nSamples))
names(geneModuleMembership)=paste("MM",modNames,sep="")
names(MMPvalue)=paste("p.MM",modNames,sep="")
traitNames=names(datTraits)
geneTraitSignificance=as.data.frame(cor(datExpr0,datTraits,use="p"))
GSPvalue=as.data.frame(corPvalueStudent(as.matrix(geneTraitSignificance),nSamples))
names(geneTraitSignificance)=paste("GS.",traitNames,sep="")
names(GSPvalue)=paste("p.GS.",traitNames,sep="")
y=datTraits[,1]
GS1=as.numeric(cor(y,datExpr0,use="p"))
GeneSignificance=abs(GS1)
ModuleSignificance=tapply(GeneSignificance,mergedColors,mean,na.rm=T)
pdf(file="9_GeneSignificance.pdf",width=11,height=7)
plotModuleSignificance(GeneSignificance,mergedColors)
dev.off()
trait="Treat"
traitColumn=match(trait,traitNames)
for(moduleinmodNames){
	column=match(module,modNames)
	moduleGenes=moduleColors==module
	if(nrow(geneModuleMembership[moduleGenes,])>1){
	outPdf=paste("10_",trait,"_",module,".pdf",sep="")
	pdf(file=outPdf,width=7,height=7)
	par(mfrow=c(1,1))
	verboseScatterplot(abs(geneModuleMembership[moduleGenes,column]),
	abs(geneTraitSignificance[moduleGenes,traitColumn]),
	xlab=paste("ModuleMembershipin",module,"module"),
	ylab=paste("Genesignificancefor",trait),
	main=paste("Modulemembershipvs.genesignificance\n"),
	cex.main=1.2,cex.lab=1.2,cex.axis=1.2,col=module)
	abline(v=0.8,h=0.5,col="red")
	dev.off()
	}
}
probes=colnames(datExpr0)
geneInfo0=data.frame(probes=probes,
moduleColor=moduleColors)
for(Train1:ncol(geneTraitSignificance))
{
oldNames=names(geneInfo0)
geneInfo0=data.frame(geneInfo0,geneTraitSignificance[,Tra],
GSPvalue[,Tra])
names(geneInfo0)=c(oldNames,names(geneTraitSignificance)[Tra],
names(GSPvalue)[Tra])
}
for(modin1:ncol(geneModuleMembership))
{
oldNames=names(geneInfo0)
geneInfo0=data.frame(geneInfo0,geneModuleMembership[,mod],
MMPvalue[,mod])
names(geneInfo0)=c(oldNames,names(geneModuleMembership)[mod],
names(MMPvalue)[mod])
}
geneOrder=order(geneInfo0$moduleColor)
geneInfo=geneInfo0[geneOrder,]
write.table(geneInfo,file="GS_MM.xls",sep="\t",row.names=F)
for(modin1:nrow(table(moduleColors)))
{
modules=names(table(moduleColors))[mod]
probes=colnames(datExpr0)
inModule=(moduleColors==modules)
modGenes=probes[inModule]
write.table(modGenes,file=paste0("module_",modules,".txt"),sep="\t",row.names=F,col.names=F,quote=F)
}
geneSigFilter=0.5
moduleSigFilter=0.8
datMM=cbind(geneModuleMembership,geneTraitSignificance)
datMM=datMM[abs(datMM[,ncol(datMM)])>geneSigFilter,]
for(mmiincolnames(datMM)[1:(ncol(datMM)-2)]){
	dataMM2=datMM[abs(datMM[,mmi])>moduleSigFilter,]
	write.table(row.names(dataMM2),file=paste0("hubGenes_",mmi,".txt"),sep="\t",row.names=F,col.names=F,quote=F)
}
rt=read.table(diffFile,header=T,sep="\t",check.names=F)
geneNames=as.vector(rt[,1])
uniqGene=unique(geneNames)
geneList[["Difference"]]=uniqGene
rt=read.table(wgcnaFile,header=F,sep="\t",check.names=F)
geneNames=as.vector(rt[,1])
uniqGene=unique(geneNames)
geneList[["WGCNA"]]=uniqGene
mycol=c("blue2","red2")
pdf(file="venn.pdf",width=5,height=5)
venn(geneList,col=mycol[1:length(geneList)],zcolor=mycol[1:length(geneList)],box=F,ilabels=F)
dev.off()
intersectGenes=Reduce(intersect,geneList)
write.table(file="interGenes.txt",intersectGenes,sep="\t",quote=F,col.names=F,row.names=F)
set.seed(111)
library(glmnet)
expFile="normalize.txt"
geneFile="interGenes.txt"
setwd("C:\\Users\\Administrator\\Desktop\\WCGNA")
rt=read.table(expFile,header=T,sep="\t",check.names=F,row.names=1)
geneRT=read.table(geneFile,header=F,sep="\t",check.names=F)
rt=rt[as.vector(geneRT[,1]),]
rt=t(rt)
x=as.matrix(rt)
y=gsub("(.*)\\_(.*)","\\2",row.names(rt))
fit=glmnet(x,y,family="binomial",alpha=1)
pdf(file="lasso.pdf",width=6,height=5.5)
plot(fit)
dev.off()
cvfit=cv.glmnet(x,y,family="binomial",alpha=1,type.measure='deviance',nfolds=10)
pdf(file="cvfit.pdf",width=6,height=5.5)
plot(cvfit)
dev.off()
coef=coef(fit,s=cvfit$lambda.min)
index=which(coef!=0)
lassoGene=row.names(coef)[index]
lassoGene=lassoGene[-1]
write.table(lassoGene,file="LASSO.gene.txt",sep="\t",quote=F,row.names=F,col.names=F)
